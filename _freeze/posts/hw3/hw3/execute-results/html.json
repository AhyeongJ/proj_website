{
  "hash": "b3a88d6ad0fee3756cef79c5318f1f9f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"EasyPython Practice Ch7\"\nauthor: Ahyeong Jeong\ndate: \"2024-07-17\"\ncategories: [EasyPython]\n---\n\n## p. 185\n문제 준비하기\n\n::: {#7f034cab .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nmpg = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/lsbigdata_project1/data/mpg.csv\")\n\n#NaN 할당하기\nmpg.loc[[64, 123, 130, 152, 211], 'hwy'] = np.nan\n```\n:::\n\n\n#### Q1.\n`drv` 별로 `hwy` 평균이 어떻게 다른지 알아보려고 한다.\n분석을 하기 전에 우선 두 변수에 결측치가 있는지 확인해야 한다. \n`drv` 변수와 `hwy` 변수에 결측치가 몇 개 있는 지 알아보자. \n\n::: {#24004a6d .cell execution_count=2}\n``` {.python .cell-code}\nmpg[['drv', 'hwy']].isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\ndrv    0\nhwy    5\ndtype: int64\n```\n:::\n:::\n\n\n#### Q2. \n`df.dropna()`를 이용해 `hwy` 변수의 결측치를 제거하고, 어떤 구동 방식의 `hwy` 평균이 높은지 알아봐. \n하나의 `pandas` 구문으로 만들어야 한다. \n\n::: {#e0ed303d .cell execution_count=3}\n``` {.python .cell-code}\nmpg.dropna(subset = 'hwy') \\\n   .groupby('drv', as_index = False) \\\n   .agg(mean = ('hwy', 'mean'))\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>drv</th>\n      <th>mean</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4</td>\n      <td>19.242424</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>f</td>\n      <td>28.200000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>r</td>\n      <td>21.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## p.194\n문제 준비하기\n\n::: {#6b186b2e .cell execution_count=4}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nmpg = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/lsbigdata_project1/data/mpg.csv\")\n\n# drv 이상치 할당\nmpg.loc[[9,13, 57, 92], 'drv'] = 'k'\n\n# cty 이상치 할당\nmpg.loc[[28, 42, 128, 202], 'cty'] = [3, 4, 39, 42]\n```\n:::\n\n\n#### Q1.\n`drv`에 이상치가 있는지 확인하라. \n이상치를 결측 처리한 다음 이상치가 사라졌는지 확인하라.\n결측처리를 할 때는 df.isin()을 활용하세요. \n\n::: {#010cf373 .cell execution_count=5}\n``` {.python .cell-code}\nmpg['drv'].value_counts().sort_index()\nmpg['drv'] = np.where(mpg['drv'].isin(['f', '4', 'r']), mpg['drv'], np.nan)\nmpg['drv'].value_counts().sort_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\ndrv\n4    100\nf    106\nr     24\nName: count, dtype: int64\n```\n:::\n:::\n\n\n#### Q2. \n상자 그림을 이용해 `cty`에 이상치가 있는지 확인하세요. 상자 그림 기준으로 정상 범위를 벗어난 값을 결측 처리한 다음 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하라. \n\n::: {#6f82a069 .cell execution_count=6}\n``` {.python .cell-code}\nsns.boxplot(data = mpg, y = 'cty')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](hw3_files/figure-html/cell-7-output-1.png){width=585 height=393}\n:::\n:::\n\n\n::: {#cbcefeb4 .cell execution_count=7}\n``` {.python .cell-code}\npct25 = mpg['cty'].quantile(.25)\npct75 = mpg['cty'].quantile(.75)\nIQR = pct75 - pct25\nprint(pct25 - IQR * 1.5, pct75 + IQR * 1.5)\nmpg['cty'] = np.where((mpg['cty'] > 26.5) | (mpg['cty'] < 6.5), np.nan, mpg['cty'])\n\nplt.clf()\nsns.boxplot(data = mpg, y = 'cty')\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6.5 26.5\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](hw3_files/figure-html/cell-8-output-2.png){width=597 height=393}\n:::\n:::\n\n\n####Q3.\n두 변수의 이상치를 결측 처리 했으니 이제 분석할 차례다.\n이상치를 제거한 다음 `drv`별로 `cty` 평균이 어떻게 다른지 알아보자. \n하나의 `pandas` 구문으로 만들어야 함. \n\n::: {#31dbdccd .cell execution_count=8}\n``` {.python .cell-code}\nmpg.dropna(subset = ['drv', 'cty']) \\\n   .groupby('drv') \\\n   .agg(mean = ('cty', 'mean'))\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mean</th>\n    </tr>\n    <tr>\n      <th>drv</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>14.247423</td>\n    </tr>\n    <tr>\n      <th>f</th>\n      <td>19.470000</td>\n    </tr>\n    <tr>\n      <th>r</th>\n      <td>13.958333</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "hw3_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}