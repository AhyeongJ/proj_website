{
  "hash": "672ab6898ca4bc96d47849b4d537a74a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"EasyPython Practice Ch8\"\nauthor: Ahyeong Jeong\ndate: \"2024-07-29\"\ncategories: [EasyPython]\n---\n\n# Ch 8. 그래프 만들기 \n\n#### Line Plot\n필요한 패키지 불러오기.\n\n::: {#5b54ed68 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n```\n:::\n\n\n데이터 불러오기.\n\n::: {#6cef9bbf .cell execution_count=2}\n``` {.python .cell-code}\neconomics = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/data/economics.csv\")\neconomics.head()\neconomics.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 574 entries, 0 to 573\nData columns (total 6 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   date      574 non-null    object \n 1   pce       574 non-null    float64\n 2   pop       574 non-null    float64\n 3   psavert   574 non-null    float64\n 4   uempmed   574 non-null    float64\n 5   unemploy  574 non-null    int64  \ndtypes: float64(4), int64(1), object(1)\nmemory usage: 27.0+ KB\n```\n:::\n:::\n\n\n시계열 그래프 만들기.\n\n::: {#725c9e18 .cell execution_count=3}\n``` {.python .cell-code}\nsns.lineplot(data = economics, x =\"date\", y =\"unemploy\")\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](EasyPython_Ch8_files/figure-html/cell-4-output-1.png){width=625 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n문자타입의 date를 날짜 시간 타입으로 변환.\n\n::: {#f5e034a3 .cell execution_count=4}\n``` {.python .cell-code}\neconomics['date2'] = pd.to_datetime(economics['date'])\neconomics.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 574 entries, 0 to 573\nData columns (total 7 columns):\n #   Column    Non-Null Count  Dtype         \n---  ------    --------------  -----         \n 0   date      574 non-null    object        \n 1   pce       574 non-null    float64       \n 2   pop       574 non-null    float64       \n 3   psavert   574 non-null    float64       \n 4   uempmed   574 non-null    float64       \n 5   unemploy  574 non-null    int64         \n 6   date2     574 non-null    datetime64[ns]\ndtypes: datetime64[ns](1), float64(4), int64(1), object(1)\nmemory usage: 31.5+ KB\n```\n:::\n:::\n\n\n변수의 타입을 날짜 시간으로 바꿔도 값이 달라지지 않음.\n\n::: {#50b70720 .cell execution_count=5}\n``` {.python .cell-code}\neconomics[['date', 'date2']]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>date2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1967-07-01</td>\n      <td>1967-07-01</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1967-08-01</td>\n      <td>1967-08-01</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1967-09-01</td>\n      <td>1967-09-01</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1967-10-01</td>\n      <td>1967-10-01</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1967-11-01</td>\n      <td>1967-11-01</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>569</th>\n      <td>2014-12-01</td>\n      <td>2014-12-01</td>\n    </tr>\n    <tr>\n      <th>570</th>\n      <td>2015-01-01</td>\n      <td>2015-01-01</td>\n    </tr>\n    <tr>\n      <th>571</th>\n      <td>2015-02-01</td>\n      <td>2015-02-01</td>\n    </tr>\n    <tr>\n      <th>572</th>\n      <td>2015-03-01</td>\n      <td>2015-03-01</td>\n    </tr>\n    <tr>\n      <th>573</th>\n      <td>2015-04-01</td>\n      <td>2015-04-01</td>\n    </tr>\n  </tbody>\n</table>\n<p>574 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n변수가 날짜 시간 타입으로 되어 있으면 `df.dt`로 연, 월, 일 추출 가능\n\n::: {#42b0bc77 .cell execution_count=6}\n``` {.python .cell-code}\neconomics['date2'].dt.year.head()  # 연 추출\neconomics['date2'].dt.month.head() # 월 추출\neconomics['date2'].dt.day.head()   # 일 추출 \neconomics['date2'].dt.month_name() # 월 명 추출 \neconomics['date2'].dt.quarter      # 분기 추출 \neconomics['quarter'] = economics['date2'].dt.quarter\neconomics[['date2', 'quarter']]\neconomics['date2'].dt.day_name()   #요일 알아보기 \n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n0       Saturday\n1        Tuesday\n2         Friday\n3         Sunday\n4      Wednesday\n         ...    \n569       Monday\n570     Thursday\n571       Sunday\n572       Sunday\n573    Wednesday\nName: date2, Length: 574, dtype: object\n```\n:::\n:::\n\n\n한달을 더할 지 30일을 더할 지 생각해보기.\n\n::: {#3ed08d28 .cell execution_count=7}\n``` {.python .cell-code}\neconomics['date2'] + pd.DateOffset(months=1)\neconomics['date2'] + pd.DateOffset(days=30)\neconomics['date2'].dt.is_leap_year   # 윤년 체크 \n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n0      False\n1      False\n2      False\n3      False\n4      False\n       ...  \n569    False\n570    False\n571    False\n572    False\n573    False\nName: date2, Length: 574, dtype: bool\n```\n:::\n:::\n\n\n연도 별 실업률 선그래프\n\n::: {#5d366cf9 .cell execution_count=8}\n``` {.python .cell-code}\n# 연도별로 표본 평균을 구해서 선그래프에 나타남.\neconomics['year'] = economics['date2'].dt.year\nsns.lineplot(data = economics, x = 'year', y = 'unemploy')\nsns.scatterplot(data = economics, x = 'year', y = 'unemploy')\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](EasyPython_Ch8_files/figure-html/cell-9-output-1.png){width=610 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n-   표시된 면적은 신뢰구간을 나타낸다.\n-   `errorbar = None` 설정 시 신뢰구간 제외하고 그래프 그려짐.\n\n\neconomics의 연도별 실업률 평균과 표준편차 구하기 \n\n::: {#7da76c11 .cell execution_count=9}\n``` {.python .cell-code}\ndf = economics.groupby('year', as_index = False) \\\n              .agg(mean = ('unemploy', 'mean'),\n                   std  = ('unemploy' ,'std'),\n                   n    = ('unemploy', 'count'))\nZ = 1.96\ndf['left_CI'] = df['mean'] - Z * df['std']/np.sqrt(df['n']) \ndf['right_CI'] = df['mean'] + Z * df['std']/np.sqrt(df['n'])\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>n</th>\n      <th>left_CI</th>\n      <th>right_CI</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1967</td>\n      <td>3012.333333</td>\n      <td>80.176472</td>\n      <td>6</td>\n      <td>2948.178794</td>\n      <td>3076.487872</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1968</td>\n      <td>2797.416667</td>\n      <td>111.575053</td>\n      <td>12</td>\n      <td>2734.287138</td>\n      <td>2860.546196</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1969</td>\n      <td>2830.166667</td>\n      <td>121.488371</td>\n      <td>12</td>\n      <td>2761.428150</td>\n      <td>2898.905183</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1970</td>\n      <td>4127.333333</td>\n      <td>567.821888</td>\n      <td>12</td>\n      <td>3806.057856</td>\n      <td>4448.608811</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1971</td>\n      <td>5021.666667</td>\n      <td>85.883995</td>\n      <td>12</td>\n      <td>4973.073222</td>\n      <td>5070.260111</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#08d5674b .cell execution_count=10}\n``` {.python .cell-code}\nx = df[\"year\"]\ny = df[\"mean\"]\nplt.plot(x, y, color= 'black')\nplt.scatter(x, df['left_CI'], color = 'blue', s=2)\nplt.scatter(x, df['right_CI'], color = 'blue', s=2)\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](EasyPython_Ch8_files/figure-html/cell-11-output-1.png){width=592 height=411}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n#### 혼자서 해보기\n`economics' 데이터를 이용해 분석 문제를 해결해 보세요\nQ1. `psavert`(개인 저축률)가 시간에 따라 어떻게 변해 왔는지 알아보려고 한다.\n연도별 개인 저축률 변화를 나타낸 시계열 그래프를 만들어보자. \n\n::: {#c54357e9 .cell execution_count=11}\n``` {.python .cell-code}\neconomics = pd.read_csv('C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/data/economics.csv')\neconomics['date2'] = pd.to_datetime(economics['date'])\neconomics['year'] = economics['date2'].dt.year\nsns.lineplot(data = economics, x = 'year', y = 'psavert')\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](EasyPython_Ch8_files/figure-html/cell-12-output-1.png){width=585 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\nQ2. 2014년 월별 `psavert`의 변화를 나타낸 시계열 그래프를 만들어 보세요.\n\n::: {#ad09ca6e .cell execution_count=12}\n``` {.python .cell-code}\neconomics['month'] = economics['date2'].dt.month\ndf_2014 = economics.query(\"year == 2014\")\nsns.lineplot(data = df_2014, x = 'month', y = 'psavert')\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](EasyPython_Ch8_files/figure-html/cell-13-output-1.png){width=589 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "EasyPython_Ch8_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}