{
  "hash": "0a14a9fe07fc5fc6a1ae975b91011e71",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"ISLP Lab: Introduction to Python\"\nauthor: Ahyeong Jeong\ndate: \"2024-07-25\"\ncategories: [ISLP]\n---\n\n## CH2. Introduction to Python \n## Practice\n\n#### 8. \n__이 문제는 `College.csv` 파일에 있는 `College`자료에 관련된다.__\n__이것은 미국 내의 777개 대학에 대한 다수의 변수들을 포함한다.__\n\n__필요한 패키지 불러오기__\n\n::: {#c1d6af20 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#!pip install ISLP\n```\n:::\n\n\n#### 8-(a)\n\n__Call the loaded data college__\n\n::: {#69f07c89 .cell execution_count=2}\n``` {.python .cell-code}\ncollege = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/posts/ISLP/data/College.csv\")\n```\n:::\n\n\n#### 8-(b)\n\n__The first column is just the name of each university in a column named something like `Unnamed: 0`__     \n__Following codes are used to give each row a name corresponding to the appropriate university__\n\n::: {#8b6fb001 .cell execution_count=3}\n``` {.python .cell-code}\nprint('Column names of college data :', college.columns)\ncollege2 = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/posts/ISLP/data/College.csv\", index_col = 0)\ncollege3 = college.rename({'Unnamed: 0': 'College'},\n                          axis =1)\ncollege3 = college3.set_index('College')\ncollege = college3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColumn names of college data : Index(['Unnamed: 0', 'Private', 'Apps', 'Accept', 'Enroll', 'Top10perc',\n       'Top25perc', 'F.Undergrad', 'P.Undergrad', 'Outstate', 'Room.Board',\n       'Books', 'Personal', 'PhD', 'Terminal', 'S.F.Ratio', 'perc.alumni',\n       'Expend', 'Grad.Rate'],\n      dtype='object')\n```\n:::\n:::\n\n\n#### 8-(c)\n__Use the `describe()` method of to produce a numerical summary of the variables__\n\n::: {#abd6e53d .cell execution_count=4}\n``` {.python .cell-code}\ncollege.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Apps</th>\n      <th>Accept</th>\n      <th>Enroll</th>\n      <th>Top10perc</th>\n      <th>Top25perc</th>\n      <th>F.Undergrad</th>\n      <th>P.Undergrad</th>\n      <th>Outstate</th>\n      <th>Room.Board</th>\n      <th>Books</th>\n      <th>Personal</th>\n      <th>PhD</th>\n      <th>Terminal</th>\n      <th>S.F.Ratio</th>\n      <th>perc.alumni</th>\n      <th>Expend</th>\n      <th>Grad.Rate</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>777.000000</td>\n      <td>777.000000</td>\n      <td>777.000000</td>\n      <td>777.000000</td>\n      <td>777.000000</td>\n      <td>777.000000</td>\n      <td>777.000000</td>\n      <td>777.000000</td>\n      <td>777.000000</td>\n      <td>777.000000</td>\n      <td>777.000000</td>\n      <td>777.000000</td>\n      <td>777.000000</td>\n      <td>777.000000</td>\n      <td>777.000000</td>\n      <td>777.000000</td>\n      <td>777.00000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>3001.638353</td>\n      <td>2018.804376</td>\n      <td>779.972973</td>\n      <td>27.558559</td>\n      <td>55.796654</td>\n      <td>3699.907336</td>\n      <td>855.298584</td>\n      <td>10440.669241</td>\n      <td>4357.526384</td>\n      <td>549.380952</td>\n      <td>1340.642214</td>\n      <td>72.660232</td>\n      <td>79.702703</td>\n      <td>14.089704</td>\n      <td>22.743887</td>\n      <td>9660.171171</td>\n      <td>65.46332</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>3870.201484</td>\n      <td>2451.113971</td>\n      <td>929.176190</td>\n      <td>17.640364</td>\n      <td>19.804778</td>\n      <td>4850.420531</td>\n      <td>1522.431887</td>\n      <td>4023.016484</td>\n      <td>1096.696416</td>\n      <td>165.105360</td>\n      <td>677.071454</td>\n      <td>16.328155</td>\n      <td>14.722359</td>\n      <td>3.958349</td>\n      <td>12.391801</td>\n      <td>5221.768440</td>\n      <td>17.17771</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>81.000000</td>\n      <td>72.000000</td>\n      <td>35.000000</td>\n      <td>1.000000</td>\n      <td>9.000000</td>\n      <td>139.000000</td>\n      <td>1.000000</td>\n      <td>2340.000000</td>\n      <td>1780.000000</td>\n      <td>96.000000</td>\n      <td>250.000000</td>\n      <td>8.000000</td>\n      <td>24.000000</td>\n      <td>2.500000</td>\n      <td>0.000000</td>\n      <td>3186.000000</td>\n      <td>10.00000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>776.000000</td>\n      <td>604.000000</td>\n      <td>242.000000</td>\n      <td>15.000000</td>\n      <td>41.000000</td>\n      <td>992.000000</td>\n      <td>95.000000</td>\n      <td>7320.000000</td>\n      <td>3597.000000</td>\n      <td>470.000000</td>\n      <td>850.000000</td>\n      <td>62.000000</td>\n      <td>71.000000</td>\n      <td>11.500000</td>\n      <td>13.000000</td>\n      <td>6751.000000</td>\n      <td>53.00000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1558.000000</td>\n      <td>1110.000000</td>\n      <td>434.000000</td>\n      <td>23.000000</td>\n      <td>54.000000</td>\n      <td>1707.000000</td>\n      <td>353.000000</td>\n      <td>9990.000000</td>\n      <td>4200.000000</td>\n      <td>500.000000</td>\n      <td>1200.000000</td>\n      <td>75.000000</td>\n      <td>82.000000</td>\n      <td>13.600000</td>\n      <td>21.000000</td>\n      <td>8377.000000</td>\n      <td>65.00000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>3624.000000</td>\n      <td>2424.000000</td>\n      <td>902.000000</td>\n      <td>35.000000</td>\n      <td>69.000000</td>\n      <td>4005.000000</td>\n      <td>967.000000</td>\n      <td>12925.000000</td>\n      <td>5050.000000</td>\n      <td>600.000000</td>\n      <td>1700.000000</td>\n      <td>85.000000</td>\n      <td>92.000000</td>\n      <td>16.500000</td>\n      <td>31.000000</td>\n      <td>10830.000000</td>\n      <td>78.00000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>48094.000000</td>\n      <td>26330.000000</td>\n      <td>6392.000000</td>\n      <td>96.000000</td>\n      <td>100.000000</td>\n      <td>31643.000000</td>\n      <td>21836.000000</td>\n      <td>21700.000000</td>\n      <td>8124.000000</td>\n      <td>2340.000000</td>\n      <td>6800.000000</td>\n      <td>103.000000</td>\n      <td>100.000000</td>\n      <td>39.800000</td>\n      <td>64.000000</td>\n      <td>56233.000000</td>\n      <td>118.00000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### 8-(d)\n__Use the `pd.plotting.scatter_matrix()` function to produce a scatterplot matrix of the first columns `[Top10perc, Apps, Enroll]`.__\n__Recall that you can reference a list C of columns of a data frame A using A[C].__\n\n::: {#677c5320 .cell execution_count=5}\n``` {.python .cell-code}\npd.plotting.scatter_matrix(college[['Top10perc', 'Apps', 'Enroll']])\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](ISLP Ch2_files/figure-html/cell-6-output-1.png){width=601 height=450}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n* `pd.plotting.scatter_matrix()` : to create a scatterplot matrix to visualize all of the pairwise relationships between the columns in a data frame\n\n#### 8 - (e)\n__Use the `boxplot()` method of `college` to produce side-by=side boxplots of `Outstate` versus `Private`__\n\n::: {#b469ee6d .cell execution_count=6}\n``` {.python .cell-code}\ncollege['Outstate'].dtype\ncollege['Private'].value_counts()\nsns.boxplot(data = college, x = 'Private', y = 'Outstate', hue = 'Private', palette = \"pink\")\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](ISLP Ch2_files/figure-html/cell-7-output-1.png){width=610 height=432}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n#### 8 - (f)\n__Create a new qualitative variable, called `Elite`, by binning the `Top10perc` variable into two groups__\n__Based on the proportion of students coming from the top 10% of their high school classes exceeds 50%.__\n\n::: {#e4eafe23 .cell execution_count=7}\n``` {.python .cell-code}\ncollege['Elite'] = pd.cut(college['Top10perc'],\n                          [0, 50, 100],\n                          labels=['No', 'Yes'])\n```\n:::\n\n\n__Use the `value_counts()` method of `college['Elite']` to see how many elite universities there are__\n\n::: {#547f22ae .cell execution_count=8}\n``` {.python .cell-code}\ncollege['Elite'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nElite\nNo     699\nYes     78\nName: count, dtype: int64\n```\n:::\n:::\n\n\n__Finally, use the `boxplot()` method again to produce side-by-side boxplots of `Outstate` versus `Elite`.__\n\n::: {#d5e906c4 .cell execution_count=9}\n``` {.python .cell-code}\nsns.boxplot(data = college, x = \"Elite\", y = \"Outstate\", hue = \"Elite\", palette = \"pink\")\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](ISLP Ch2_files/figure-html/cell-10-output-1.png){width=610 height=432}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n#### 8 - (g)\n\n__Use the `plot.hist()` method of `college` to produce some histograms with differing numbers of bins for a few of the quantitative variables__\n__The command plt.subplots(2, 2) may be useful: it will divide the plot window into four regions so that four plots can be made simultaneously. By changing the arguments you can divide the screen up in other combinations.__\n\n::: {#1626eb39 .cell execution_count=10}\n``` {.python .cell-code}\ncollege['Expend'].describe()\nfig = plt.figure()\nplt.subplot(221)\nsns.histplot(data = college, x = \"Expend\")\nplt.subplot(222)\nsns.histplot(data = college, x = \"Personal\")\nplt.subplot(223)\nsns.histplot(data = college, x = \"Room.Board\")\nplt.subplot(224)\nsns.histplot(data = college, x = \"Books\")\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](ISLP Ch2_files/figure-html/cell-11-output-1.png){width=593 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n#### 9 \n__This exercise involves the `Auto` data set studied in the lab. Make sure that the missing values have been removed from the data.__\n\n#### 9 -(a)\n__Which of the predictors are quantitative, and which are qualitatative?__\n\n::: {#6c31751b .cell execution_count=11}\n``` {.python .cell-code}\nauto = pd.read_csv(\"C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/posts/ISLP/data/Auto.csv\")\nauto.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 397 entries, 0 to 396\nData columns (total 9 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   mpg           397 non-null    float64\n 1   cylinders     397 non-null    int64  \n 2   displacement  397 non-null    float64\n 3   horsepower    397 non-null    object \n 4   weight        397 non-null    int64  \n 5   acceleration  397 non-null    float64\n 6   year          397 non-null    int64  \n 7   origin        397 non-null    int64  \n 8   name          397 non-null    object \ndtypes: float64(3), int64(4), object(2)\nmemory usage: 28.0+ KB\n```\n:::\n:::\n\n\n* The variables which dtype is object are `horsepower`, `name`\n\n\n__There are missing values represented by a `?`.__\n__Change to numeric.__\n\n::: {#42b3a1a7 .cell execution_count=12}\n``` {.python .cell-code}\nauto['horsepower'].unique()\nauto = auto[auto.horsepower != \"?\"].copy()\nauto['horsepower'] = pd.to_numeric(auto['horsepower'])\n```\n:::\n\n\n::: {#a9d38872 .cell execution_count=13}\n``` {.python .cell-code}\nquantitative = auto.select_dtypes(include =['number']).columns\nqualitative = auto.select_dtypes(exclude = ['number']).columns\n```\n:::\n\n\n#### 9 - (b)\n\n__What is the range of each quantitative predictor? You can answer this using the `min()` and `max()` methods in `numpy`.__\n\n::: {#91be076b .cell execution_count=14}\n``` {.python .cell-code}\nauto_describe = auto.describe()\nauto_describe.loc['range'] = auto_describe.loc['max'] - auto_describe.loc['min']\nauto_describe.loc['range']\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nmpg               37.6\ncylinders          5.0\ndisplacement     387.0\nhorsepower       184.0\nweight          3527.0\nacceleration      16.8\nyear              12.0\norigin             2.0\nName: range, dtype: float64\n```\n:::\n:::\n\n\n#### 9 - (c)\n\n__What is the mean and standard deviation of each quantitative predictor?__\n\n::: {#46cde9bb .cell execution_count=15}\n``` {.python .cell-code}\n# auto.describe()\nauto_describe.loc[['range', 'mean', 'std']]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>year</th>\n      <th>origin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>range</th>\n      <td>37.600000</td>\n      <td>5.000000</td>\n      <td>387.000000</td>\n      <td>184.000000</td>\n      <td>3527.000000</td>\n      <td>16.800000</td>\n      <td>12.000000</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>23.445918</td>\n      <td>5.471939</td>\n      <td>194.411990</td>\n      <td>104.469388</td>\n      <td>2977.584184</td>\n      <td>15.541327</td>\n      <td>75.979592</td>\n      <td>1.576531</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>7.805007</td>\n      <td>1.705783</td>\n      <td>104.644004</td>\n      <td>38.491160</td>\n      <td>849.402560</td>\n      <td>2.758864</td>\n      <td>3.683737</td>\n      <td>0.805518</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### 9 - (d)\n\n__Remove the 10th through 85th observations.__\n__What is the range, mean, and standard deviation of each predictor?__\n\n::: {#b78d9ecf .cell execution_count=16}\n``` {.python .cell-code}\nauto_drop = auto.drop(auto.index[10:85])\nauto_drop_describe = auto.describe()\nauto_drop_describe.loc['range'] = auto_drop_describe.loc['max'] - auto_drop_describe.loc['min']\nauto_drop_describe.loc[[\"range\", \"mean\", \"std\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>year</th>\n      <th>origin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>range</th>\n      <td>37.600000</td>\n      <td>5.000000</td>\n      <td>387.000000</td>\n      <td>184.000000</td>\n      <td>3527.000000</td>\n      <td>16.800000</td>\n      <td>12.000000</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>23.445918</td>\n      <td>5.471939</td>\n      <td>194.411990</td>\n      <td>104.469388</td>\n      <td>2977.584184</td>\n      <td>15.541327</td>\n      <td>75.979592</td>\n      <td>1.576531</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>7.805007</td>\n      <td>1.705783</td>\n      <td>104.644004</td>\n      <td>38.491160</td>\n      <td>849.402560</td>\n      <td>2.758864</td>\n      <td>3.683737</td>\n      <td>0.805518</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### 9 - (e)\n\n__Using the full data set, investicate the predictors graphically, using scatterplots or other tools of your choice. Create some plots highlighting the relationships among the predidctors. Comment on your findings.__\n\n::: {#5042595e .cell execution_count=17}\n``` {.python .cell-code}\nsns.pairplot(auto, plot_kws={'s': 5})\nplt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](ISLP Ch2_files/figure-html/cell-18-output-1.png){width=1617 height=1596}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n#### 9 - (f)\n\n__Suppose that we wish to predict `mpg` on the basis of the other variables. Do your plots suggest that any of the other variables might be useful in predicting `mpg`?__\n\nBased on the previous question, we could use weight, horsepower and displacement. These variables have a non-linear relationship with mpg. \n\n",
    "supporting": [
      "ISLP Ch2_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}