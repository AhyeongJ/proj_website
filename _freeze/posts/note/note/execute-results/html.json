{
  "hash": "ef499511e48be83573505b07d109b2fd",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"LS Bigdata School note 1\"\nauthor: Ahyeong Jeong\ndate: \"2024-07-17\"\ncategories: [note]\n---\n\n#### Python\n\n-   `Ctrl + Enter`\n-   `Shift + 화살표`: 블록\n-   `Shift + Alt + 아래화살표`: 아래로 복사\n-   `Ctrl + Alt + 아래화살표`: 커서 여러개\n\n::: {#76be2579 .cell execution_count=1}\n``` {.python .cell-code}\na = 1\na\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n1\n```\n:::\n:::\n\n\n-   `ls(dir)`: 파일 목록\n\n-   `cd`: 폴더 이동\n\n-   `.` 현재폴더\n\n-   `..` 상위폴더\n\n-   Show folder in new window: 해당위치 탐색기\n\n-   앞에 조금 적고 `Tab`: 자동완성\n\n-   `cls`: 화면 정리\n\n#### 변수에 값을 할당\n\n::: {#060b493c .cell execution_count=2}\n``` {.python .cell-code}\nnumber = 10 \ngreeting = \"안녕하세요!\"\ngreeting = '안녕하세요!'\ngreeting = \"'안녕하세요'라고 말했다\" # 작은따옴표, 큰따옴표가 쓰이는 이유\n```\n:::\n\n\n#### 리스트 만들기\n\n::: {#abed17a0 .cell execution_count=3}\n``` {.python .cell-code}\nvar1 = [1, 2, 3]\nprint(var1)\nvar2 = [4, 5, 6]\nprint(var2) \nprint(var1 + var2)\na = '안녕하세요!'\nb = 'LS 빅데이터 스쿨!'\nprint(a + b)\nprint(a + ' ' + b)\n# 문자는 문자끼리만 더할 수 있음. \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3]\n[4, 5, 6]\n[1, 2, 3, 4, 5, 6]\n안녕하세요!LS 빅데이터 스쿨!\n안녕하세요! LS 빅데이터 스쿨!\n```\n:::\n:::\n\n\n#### 변수 생성\n\n::: {#bda1b4ff .cell execution_count=4}\n``` {.python .cell-code}\nnum1 = 3\nnum2 = 5\nprint(num1 + num2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n8\n```\n:::\n:::\n\n\n#### 변수명 스타일\n\n-   스네이크 케이스: 모든 글자 소문자, 단어 사이에 밑줄 사용 ex) ls_bigdata_shool\n-   카멜 케이스: 각 단어의 첫 글자를 대문자로 시작 ex) LsBigdataSchool\n\n#### 기본산술연산자\n\n::: {#31a8e9c5 .cell execution_count=5}\n``` {.python .cell-code}\na = 10\nb = 3.3\nprint(a + b) #덧셈(정수는 실수로 변환해 계산)\nprint(a - b) #뺄셈\nprint(a * b) #곱셈\nprint(a / b) #나눗셈\nprint(a % b) #나머지\nprint(a // b) #몫(정수나눗셈)\nprint(a ** b) #거듭제곱 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n13.3\n6.7\n33.0\n3.0303030303030303\n0.10000000000000053\n3.0\n1995.2623149688789\n```\n:::\n:::\n\n\n#### 비교관련연산자\n\n::: {#9d10dcb9 .cell execution_count=6}\n``` {.python .cell-code}\na = 10\nb = 20\n\nprint(a == b)\nprint(a != b)\nprint(a < b)\nprint(a > b)\nprint(a >= b)\nprint(a <= b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\nTrue\nTrue\nFalse\nFalse\nTrue\n```\n:::\n:::\n\n\n#### 연습문제 num1 num2 만들고 큰 수 구하기\n\n::: {#2129953c .cell execution_count=7}\n``` {.python .cell-code}\nnum1 = ((2**4) + (12453//7)) % 8\nnum2 = ((9**7) / 12) * (36452 % 253)\nprint(num1 < num2) \n\nuser_age = 22\nis_adult = user_age >= 18\nprint(\"성인입니까?\", is_adult)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n성인입니까? True\n```\n:::\n:::\n\n\n#### True나 False 같은 예약어는 변수명으로 쓰일 수 없다\n\n::: {#bf20e407 .cell execution_count=8}\n``` {.python .cell-code}\ntrue = [1, 2, 3]\na = \"True\"\n#python은 대소문자를 구분함. \nc = true  #위와 달리 true에 대해서 값을 할당했기 때문에 true 변수의 값을 c에 할당함. \nd = True  #boolean으로 부여  \n```\n:::\n\n\n#### 논리관련연산자 (Boolean)\n\n::: {#a30b99f5 .cell execution_count=9}\n``` {.python .cell-code}\na = True\nb = False\nprint(a and b)\nprint(a or b)\nprint(not a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\nTrue\nFalse\n```\n:::\n:::\n\n\n#### and 연산자\n\n-   True: 1 , False: 0\n\n::: {#c9e827f8 .cell execution_count=10}\n``` {.python .cell-code}\nprint(True + True) \nprint(True + False) \nprint(False + False) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n1\n0\n```\n:::\n:::\n\n\n#### and는 곱(\\*)으로 치환 가능\n\n::: {#c78bc886 .cell execution_count=11}\n``` {.python .cell-code}\nprint(True * True) #1\nprint(True * False) #0\nprint(False * False) #0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n0\n0\n```\n:::\n:::\n\n\n#### or 연산자\n\n::: {#2c4d47ee .cell execution_count=12}\n``` {.python .cell-code}\nprint(True or True)\nprint(True or False)\nprint(False or True)\nprint(False or False)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nTrue\nTrue\nFalse\n```\n:::\n:::\n\n\n#### or은 덧셈(+)과 같음\n\n::: {#9849f396 .cell execution_count=13}\n``` {.python .cell-code}\na = True\nb = False\nprint(a or b)\nprint(min(a + b , 1)) #수식, 0일 때 제외하고 모든 결과 1 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n1\n```\n:::\n:::\n\n\n#### 복합대입연산자\n\n::: {#71aee9d1 .cell execution_count=14}\n``` {.python .cell-code}\na = 100\na += 10\na -= 10\na *= 2 \na /= 2\na %= 14 #나머지a\na **= 2\na //= 2 #몫\na\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n2.0\n```\n:::\n:::\n\n\n#### 문자열 반복\n\n::: {#ef4c8731 .cell execution_count=15}\n``` {.python .cell-code}\nstr1 = \"Hello! \"\nrepeated_str1 = str1 * 3  #문자열과 숫자의 곲셈은 정수만 가능 \nprint(\"Repeated string:\", repeated_str1)\n\nprint(str1 * (-2)) #error 안 뜲 '' \nprint(str1 * 0)  #error 안 뜲 '' \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRepeated string: Hello! Hello! Hello! \n\n\n```\n:::\n:::\n\n\n-   정수: integer\n-   실수: float (double)\n\n#### 단항 연산자\n\n::: {#c0bbb2c9 .cell execution_count=16}\n``` {.python .cell-code}\nx = 5\nprint(+x) #양수 강조\nprint(-x) #부호 변환\nprint(~x) #x의 비트를 반전 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n-5\n-6\n```\n:::\n:::\n\n\n#### 비트 연산자\n\n-   bin()함수를 사용하면 정수의 이진수 표현을 반환함\n-   bin()은 이진수 표현을 문자열 형식으로 제공함. 모든 이진수 문자열은 0b 접두사로 시작\n\n#### 패키지 설치하기\n\n1.  Terminal에서 설치하기\n2.  느낌표(!) 뒤에 설치 코드 입력하기\n\n-   설치코드: `pip install 패키지명`\n\n::: {#8722006a .cell execution_count=17}\n``` {.python .cell-code}\nimport pydataset\npydataset.data() #데이터셋 목록 출력 (757개의 데이터셋)\ndf = pydataset.data(\"AirPassengers\") # 특정 데이터 불러오기 \ndf.head()\n\nimport pandas as pd\n```\n:::\n\n\n",
    "supporting": [
      "note_files"
    ],
    "filters": [],
    "includes": {}
  }
}