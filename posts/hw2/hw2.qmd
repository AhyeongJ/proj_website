---
title: "EasyPython Practice Ch6"
author: Ahyeong Jeong
date: "2024-07-17"
categories: [EasyPython]
---
## p.144
#### Q1. 
자동차 배기량에 따라 고속도로 연비가 다른지 알아보자
`displ`이 4이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 `hwy` 평균이 더 높은지 알아보세요
```{python}
import pandas as pd
import numpy as np
```

```{python}
mpg = pd.read_csv("C:/Users/USER/Documents/LS 빅데이터 스쿨/Doit_Python/Data/mpg.csv")
displ1 = mpg.query('displ <= 4')
displ2 = mpg.query('displ >= 5')
displ1['hwy'].mean().round(2)
displ2['hwy'].mean().round(2)
```

#### Q2. 
자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보자.
`audi`와 `toyota` 중 어느 `manufacturer`의 `cty` 평균이 더 높은지 알아보세요
```{python}
audi = mpg.query('manufacturer == "audi"')
toyota = mpg.query('manufacturer == "toyota"')
audi['cty'].mean().round(2)
toyota['cty'].mean().round(2)
```

#### Q3. 
`chevrolet`, `ford`, `honda` 자동차의 고속도로 연비 평균을 알아보자.
세 회사의 데이터를 추출한 다음 `hwy`전체 평균을 구해보세요.
```{python}
car3 = mpg.query('manufacturer in ["chevrolet", "ford", "honda"]')
car3['hwy'].mean().round(2)
```
## p.150
#### Q1. 
`mpg` 데이터 중 일부만 추출해 분석에 활용하자. 
`mpg` 데이터에서 `category`, `cty` 변수를 추출해 새로운 데이터를 만들어라. 
새로 만든 데이터의 일부를 추출해 두 변수로만 구성되어 있는지 확인하세요. 
```{python}
df = mpg[['category','cty']]
df.head()
```

#### Q2. 
자동차 종류에 따라 도시 연비가 어떻게 다른지 알아보고자 한다. 
앞에서 추출한 데이터를 이용해 `category`가 `suv`인 자동차와 `compact`인 자동차 중 어떤 자동차의 `cty` 평균이 더 높은가. 
```{python}
df.query('category in ["suv", "compact"]') \
  .groupby('category') \
  .agg(cty_mean = ("cty", "mean")) 
```


## p.153
#### Q1. 
`audi`에서 생산한 자동차 중에 어떤 자동차 모델의 `hwy`가 높은지 알아보자
`audi`에서 생산한 자동차 중 `hwy`가 1~5위에 해당하는 자동차의 데이터를 출력하라
```{python}
mpg.query("manufacturer == 'audi'") \
    .sort_values('hwy', ascending = False) \
    .head(5)
```

## p.158
#### Q1. 
`mpg` 데이터 복사본을 만들고, `cty`와 `hwy`를 더한 '합산 연비 변수'를 추가하라.
```{python}
mpg2 = mpg.copy()
mpg2 = mpg2.assign(total = mpg2['cty'] + mpg2['hwy'])
mpg2.head()
```


#### Q2. 
앞에서 만든 '합산 연비 변수'를 2로 나눠 '평균 연비 변수'를 추가하라.
```{python}
mpg2 = mpg2.assign(mean = mpg2['total'] / 2)
mpg2.head()
```

#### Q3.
'평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하라
```{python}
mpg2.sort_values('mean')['model'].head()
```

#### Q4. 
1~3번 문제를 해결할 수 있는 하나로 연결된 `pandas` 구문을 만들어 실행해 보자.
데이터는 복사본 대신 `mpg` 원본을 이용하라. 
```{python}
mpg.assign(total = mpg["cty"] + mpg["cty"],
           total_mean = lambda x : x["total"] / 2) \
   .sort_values('total_mean', ascending = False) \
   .head(3)

```

## P.166 
#### Q1. 
`mpg` 데이터의 `category`는 자동차를 특징에 따라 `suv`, `compact` 등 일곱 종류로 분류한 변수
어떤 차종의 도시 연비가 높은지 비교해 보려고 한다. `category`별 `cty` 평균을 구해 보자. 
```{python}
mpg.groupby("category", as_index = False) \
   .agg(cty_mean = ('cty', 'mean'))
```

#### Q2.
앞 문제의 출력 결과는 `category` 값 알파벳순으로 정렬되어 있다. 
어떤 차종의 도시 연비가 높은지 쉽게 알아볼 수 있도록 `cty` 평균이 높은 순으로 정렬해 출력하라. 
```{python}
mpg.groupby("category", as_index = False) \
   .agg(cty_mean = ('cty', 'mean')) \
   .sort_values('cty_mean', ascending = False)
```

#### Q3. 
어떤 회사 자동차의 `hwy`가 가장 높은지 알아보려고 한다. 
`hwy` 평균이 가장 높은 회사 세 곳을 출력하세요. 
```{python}
mpg.groupby('manufacturer', as_index = False) \
   .agg(mean_hwy = ('hwy', 'mean')) \
   .sort_values('mean_hwy', ascending = False)\
   .round(2) \
   .head(3)[['manufacturer']]
```


#### Q4.
어떤 회사에서 `compact` 차종을 가장 많이 생산하는지 알아보려고 한다. 
회사별 `compact`차종 수를 내림차순으로 정렬해 출력하라. 
```{python}
mpg.query('category == "compact"') \
   .groupby('manufacturer', as_index = False) \
   .agg(n = ('category', 'count')) \
   .sort_values('n', ascending = False)
```

## p.173
문제 준비
```{python}
fuel = pd.DataFrame({'fl'       : ['c', 'd', 'e', 'p', 'r'],
                     'price_fl' : [2.35, 2.38, 2.11, 2.76, 2.22]})
fuel
```
#### Q1. 
`mpg` 데이터에는 연료 종류를 나타낸 `f1` 변수는 있지만 연료 가격을 나타낸 변수는 없다.
앞에서 만든 `fuel`데이터를 이용해 `mpg` 데이터에 `price_f1` 변수를 추가하라. 
```{python}
mpg = pd.read_csv("C:/Users/USER/Documents/LS 빅데이터 스쿨/myportfolio/data/mpg.csv")
mpg = mpg.merge(fuel, how = "left", on = "fl")
mpg.head()
```
#### Q2. 
연료 가격 변수가 잘 추가됐는지 확인하기 위해 `model`, `fl`, `price_fl` 변수를 추출해 앞부분 5행을 출력하라. 
```{python}
mpg[['model', 'fl', 'price_fl']].head()
```

## p.176
#### 준비하기 
```{python}
import pandas as pd
import numpy as np
midwest = pd.read_csv("C:/Users/User/Documents/LS 빅데이터 스쿨/lsbigdata_project1/data/midwest.csv")
```

#### Q1
`popadults`는 해당 지역의 성인 인구, `poptotal`은 전체 인구를 나타냅니다. 
`midwest` 데이터에 '전체 인구 대비 미성년 인구 백분율' 변수를 추가하세요.
```{python}
midwest['nonadult_ratio'] = (midwest['poptotal'] - midwest['popadults']) / midwest['poptotal'] * 100
midwest.head()
```
#### Q2. 
미성년 인구 백분율이 가장 높은 상위 5개 `county`의 미성년 인구 백분율을 출력하라. 
```{python}
midwest.sort_values('nonadult_ratio',ascending = False) \
       .head() \
       [['county', 'nonadult_ratio']]
```

#### Q3. 
분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보자. 
```{python}
midwest['grade'] = np.where(midwest['nonadult_ratio'] >= 40, 'large',
                   np.where(midwest['nonadult_ratio'] >= 30, 'middle', 'small'))
midwest.groupby('grade', as_index = False) \
       .agg(n = ('grade', 'count'))
```

#### Q4.
`popasian`은 해당 지역의 아시아인 인구를 나타냅니다. '전체 인구 대비 아시아인 인구 백분율' 변수를 추가하고 하위 10개의 지역의 `state`, `county`, 아시아인 인구 백분율을 출력하라. 
```{python}
midwest['asian_ratio'] = midwest['popasian'] / midwest['poptotal'] * 100
midwest.sort_values('asian_ratio') \
       [['state', 'county', 'asian_ratio']] \
       .head(10)
```

